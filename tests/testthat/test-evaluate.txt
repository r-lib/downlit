> # Parsing failure
> cat(evaluate_and_highlight("1 + \n"))
<div class='input'>NA</div><div class='co'>#&gt; <span class='error'>Error: </span>&lt;text&gt;:3:0: unexpected end of input#&gt; 1: 1 + #&gt; 2: #&gt;   ^</div>

> # Basic ouput
> cat(evaluate_and_highlight("# comment \n"))
<div class='input'><span class='co'># comment </span></div>

> cat(evaluate_and_highlight("message('x') \n"))
<div class='input'><span class='fu'><a href='https://rdrr.io/r/base/message.html'>message</a></span><span class='op'>(</span><span class='st'>'x'</span><span class='op'>)</span> </div>
<div class='co'>#&gt; x</div>

> cat(evaluate_and_highlight("warning('x') \n"))
<div class='input'><span class='kw'><a href='https://rdrr.io/r/base/warning.html'>warning</a></span><span class='op'>(</span><span class='st'>'x'</span><span class='op'>)</span> </div>
<div class='co'>#&gt; <span class='warning'>Warning: </span>x</div>

> cat(evaluate_and_highlight("stop('x', call. = FALSE) \n"))
<div class='input'><span class='kw'><a href='https://rdrr.io/r/base/stop.html'>stop</a></span><span class='op'>(</span><span class='st'>'x'</span>, call. <span class='op'>=</span> <span class='cn'>FALSE</span><span class='op'>)</span> </div>
<div class='co'>#&gt; <span class='error'>Error: </span>x</div>

> # Plots
> fig_save <- (function(plot, id) list(path = paste0(id, ".png"), width = 10,
+ height = 10))
> f1 <- (function() plot(1))
> f2 <- (function() lines(0:2, 0:2))
> cat(evaluate_and_highlight("f1()\nf2()\n", fig_save = fig_save, env = environment()))
<div class='input'><span class='fu'>f1</span><span class='op'>(</span><span class='op'>)</span></div>
<div class='input'><span class='fu'>f2</span><span class='op'>(</span><span class='op'>)</span></div>
<div class='img'><img src='1.png' alt='' width='10' height='10' /></div>

> # Other plots
> f3 <- (function() structure(3, class = c("fakePlot", "otherRecordedplot")))
> f4 <- (function() structure(4, class = c("fakePlot", "otherRecordedplot")))
> is_low_change.fakePlot <- (function(p1, p2) TRUE)
> print.fakePlot <- (function(x, ...) {
+   x
+ })
> replay_html.fakePlot <- (function(x, ...) {
+   paste("Text for plot ", unclass(x))
+ })
> registerS3method("is_low_change", "fakePlot", is_low_change.fakePlot, envir = asNamespace(
+   "downlit"))
> registerS3method("replay_html", "fakePlot", replay_html.fakePlot, envir = asNamespace(
+   "downlit"))
> registerS3method("print", "fakePlot", print.fakePlot)
> cat(evaluate_and_highlight("f3()\nf4()", env = environment(), fig_save = fig_save,
+ output_handler = evaluate::new_output_handler(value = print)))
<div class='input'><span class='fu'>f3</span><span class='op'>(</span><span class='op'>)</span></div>
<div class='input'><span class='fu'>f4</span><span class='op'>(</span><span class='op'>)</span></div>Text for plot  4

